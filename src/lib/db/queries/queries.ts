// GENERATED by @edgedb/generate v0.4.1

import type {Executor} from "edgedb";

export type GetRegionArgs = {
  "x": number;
  "y": number;
};

export type GetRegionReturns = {
  "x": number;
  "y": number;
  "posts": unknown | null;
} | null;

export async function getRegion(client: Executor, args: GetRegionArgs): Promise<GetRegionReturns> {
  return client.querySingle(`\
SELECT Region {
    x,
    y,
    posts
}
FILTER .x = <int64>$x AND .y = <int64>$y
LIMIT 1;`, args);

}


export type InsertRegionArgs = {
  "x": number;
  "y": number;
  "posts": unknown;
};

export type InsertRegionReturns = {
  "x": number;
  "y": number;
  "posts": unknown | null;
};

export async function insertRegion(client: Executor, args: InsertRegionArgs): Promise<InsertRegionReturns> {
  return client.queryRequiredSingle(`\
SELECT (INSERT Region {
    x := <int64>$x,
    y := <int64>$y,
    posts := <json>$posts
}) {
    x,
    y,
    posts
};`, args);

}


export type GetRegionsArgs = {
  "coordinates": [number, number][];
};

export type GetRegionsReturns = {
  "x": number;
  "y": number;
  "posts": unknown | null;
}[];

export async function getRegions(client: Executor, args: GetRegionsArgs): Promise<GetRegionsReturns> {
  return client.query(`\
WITH 
    coordinates := array_unpack(<array<tuple<int64, int64>>> $coordinates)
SELECT Region {
    x,
    y,
    posts
}
FILTER (.x, .y) IN coordinates;`, args);

}
