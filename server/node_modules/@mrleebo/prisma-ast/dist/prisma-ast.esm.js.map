{"version":3,"file":"prisma-ast.esm.js","sources":["../src/lexer.ts","../src/getConfig.ts","../src/parser.ts","../src/schemaUtils.ts","../src/visitor.ts","../src/getSchema.ts","../src/schemaSorter.ts","../src/printSchema.ts","../src/PrismaSchemaBuilder.ts"],"sourcesContent":["import { createToken, Lexer, IMultiModeLexerDefinition } from 'chevrotain';\n\nexport const Identifier = createToken({\n  name: 'Identifier',\n  pattern: /[a-zA-Z]\\w*/,\n});\nexport const Datasource = createToken({\n  name: 'Datasource',\n  pattern: /datasource/,\n  push_mode: 'block',\n});\nexport const Generator = createToken({\n  name: 'Generator',\n  pattern: /generator/,\n  push_mode: 'block',\n});\nexport const Model = createToken({\n  name: 'Model',\n  pattern: /model/,\n  push_mode: 'block',\n});\nexport const View = createToken({\n  name: 'View',\n  pattern: /view/,\n  push_mode: 'block',\n});\nexport const Enum = createToken({\n  name: 'Enum',\n  pattern: /enum/,\n  push_mode: 'block',\n});\nexport const True = createToken({\n  name: 'True',\n  pattern: /true/,\n  longer_alt: Identifier,\n});\nexport const False = createToken({\n  name: 'False',\n  pattern: /false/,\n  longer_alt: Identifier,\n});\nexport const Null = createToken({\n  name: 'Null',\n  pattern: /null/,\n  longer_alt: Identifier,\n});\nexport const Comment = createToken({\n  name: 'Comment',\n  pattern: Lexer.NA,\n});\n\nexport const DocComment = createToken({\n  name: 'DocComment',\n  pattern: /\\/\\/\\/\\s*(.+)/,\n  categories: [Comment],\n});\nexport const LineComment = createToken({\n  name: 'LineComment',\n  pattern: /\\/\\/\\s*(.+)/,\n  categories: [Comment],\n});\nexport const Attribute = createToken({\n  name: 'Attribute',\n  pattern: Lexer.NA,\n});\nexport const BlockAttribute = createToken({\n  name: 'BlockAttribute',\n  pattern: /@@/,\n  label: \"'@@'\",\n  categories: [Attribute],\n});\nexport const FieldAttribute = createToken({\n  name: 'FieldAttribute',\n  pattern: /@/,\n  label: \"'@'\",\n  categories: [Attribute],\n});\nexport const Dot = createToken({\n  name: 'Dot',\n  pattern: /\\./,\n  label: \"'.'\",\n});\nexport const QuestionMark = createToken({\n  name: 'QuestionMark',\n  pattern: /\\?/,\n  label: \"'?'\",\n});\nexport const LCurly = createToken({\n  name: 'LCurly',\n  pattern: /{/,\n  label: \"'{'\",\n});\nexport const RCurly = createToken({\n  name: 'RCurly',\n  pattern: /}/,\n  label: \"'}'\",\n  pop_mode: true,\n});\nexport const LRound = createToken({\n  name: 'LRound',\n  pattern: /\\(/,\n  label: \"'('\",\n});\nexport const RRound = createToken({\n  name: 'RRound',\n  pattern: /\\)/,\n  label: \"')'\",\n});\nexport const LSquare = createToken({\n  name: 'LSquare',\n  pattern: /\\[/,\n  label: \"'['\",\n});\nexport const RSquare = createToken({\n  name: 'RSquare',\n  pattern: /\\]/,\n  label: \"']'\",\n});\nexport const Comma = createToken({\n  name: 'Comma',\n  pattern: /,/,\n  label: \"','\",\n});\nexport const Colon = createToken({\n  name: 'Colon',\n  pattern: /:/,\n  label: \"':'\",\n});\nexport const Equals = createToken({\n  name: 'Equals',\n  pattern: /=/,\n  label: \"'='\",\n});\nexport const StringLiteral = createToken({\n  name: 'StringLiteral',\n  pattern: /\"(:?[^\\\\\"\\n\\r]|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"/,\n});\nexport const NumberLiteral = createToken({\n  name: 'NumberLiteral',\n  pattern: /-?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)?/,\n});\nexport const WhiteSpace = createToken({\n  name: 'WhiteSpace',\n  pattern: /\\s+/,\n  group: Lexer.SKIPPED,\n});\nexport const LineBreak = createToken({\n  name: 'LineBreak',\n  pattern: /\\n|\\r\\n/,\n  line_breaks: true,\n  label: 'LineBreak',\n});\n\nconst naTokens = [Comment, DocComment, LineComment, LineBreak, WhiteSpace];\n\nexport const multiModeTokens: IMultiModeLexerDefinition = {\n  modes: {\n    global: [...naTokens, Datasource, Generator, Model, View, Enum],\n    block: [\n      ...naTokens,\n      Attribute,\n      BlockAttribute,\n      FieldAttribute,\n      Dot,\n      QuestionMark,\n      LCurly,\n      RCurly,\n      LSquare,\n      RSquare,\n      LRound,\n      RRound,\n      Comma,\n      Colon,\n      Equals,\n      True,\n      False,\n      Null,\n      StringLiteral,\n      NumberLiteral,\n      Identifier,\n    ],\n  },\n  defaultMode: 'global',\n};\n\nexport const PrismaLexer = new Lexer(multiModeTokens);\n","import type { IParserConfig } from 'chevrotain';\nimport {\n  lilconfigSync as configSync,\n  type LilconfigResult as ConfigResultRaw,\n} from 'lilconfig';\n\nexport interface PrismaAstConfig {\n  parser: Pick<IParserConfig, 'nodeLocationTracking'>;\n}\n\ntype ConfigResult<T> = Omit<ConfigResultRaw, 'config'> & {\n  config: T;\n};\n\nconst defaultConfig: PrismaAstConfig = {\n  parser: { nodeLocationTracking: 'none' },\n};\n\nlet config: PrismaAstConfig;\nexport default function getConfig(): PrismaAstConfig {\n  if (config != null) return config;\n\n  const result: ConfigResult<PrismaAstConfig> | null =\n    configSync('prisma-ast').search();\n  return (config = Object.assign(defaultConfig, result?.config));\n}\n","import { CstParser } from 'chevrotain';\nimport getConfig from './getConfig';\nimport * as lexer from './lexer';\n\ntype ComponentType = 'datasource' | 'generator' | 'model' | 'view' | 'enum';\nexport class PrismaParser extends CstParser {\n  constructor() {\n    super(lexer.multiModeTokens, getConfig().parser);\n    this.performSelfAnalysis();\n  }\n\n  private break = this.RULE('break', () => {\n    this.CONSUME1(lexer.LineBreak);\n    this.CONSUME2(lexer.LineBreak);\n  });\n\n  private keyedArg = this.RULE('keyedArg', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'keyName' });\n    this.CONSUME(lexer.Colon);\n    this.SUBRULE(this.value);\n  });\n\n  private array = this.RULE('array', () => {\n    this.CONSUME(lexer.LSquare);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.SUBRULE(this.value);\n      },\n    });\n    this.CONSUME(lexer.RSquare);\n  });\n\n  private func = this.RULE('func', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'funcName' });\n    this.CONSUME(lexer.LRound);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.OR([\n          { ALT: () => this.SUBRULE(this.keyedArg) },\n          { ALT: () => this.SUBRULE(this.value) },\n        ]);\n      },\n    });\n    this.CONSUME(lexer.RRound);\n  });\n\n  private value = this.RULE('value', () => {\n    this.OR([\n      { ALT: () => this.CONSUME(lexer.StringLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.NumberLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.array, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.func, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.True, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.False, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Null, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'value' }) },\n    ]);\n  });\n\n  private property = this.RULE('property', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'propertyName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'propertyValue' });\n  });\n\n  private assignment = this.RULE('assignment', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'assignmentName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'assignmentValue' });\n  });\n\n  private field = this.RULE('field', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'fieldName' });\n    this.SUBRULE(this.value, { LABEL: 'fieldType' });\n    this.OPTION1(() => {\n      this.OR([\n        {\n          ALT: () => {\n            this.CONSUME(lexer.LSquare, { LABEL: 'array' });\n            this.CONSUME(lexer.RSquare, { LABEL: 'array' });\n          },\n        },\n        { ALT: () => this.CONSUME(lexer.QuestionMark, { LABEL: 'optional' }) },\n      ]);\n    });\n    this.MANY(() => {\n      this.SUBRULE(this.attribute, { LABEL: 'attributeList' });\n    });\n    this.OPTION2(() => {\n      this.CONSUME(lexer.Comment, { LABEL: 'comment' });\n    });\n  });\n\n  private block = this.RULE(\n    'block',\n    (\n      options: {\n        componentType?: ComponentType;\n      } = {}\n    ) => {\n      const { componentType } = options;\n      const isEnum = componentType === 'enum';\n      const isObject = componentType === 'model' || componentType === 'view';\n\n      this.CONSUME(lexer.LCurly);\n      this.CONSUME1(lexer.LineBreak);\n      this.MANY(() => {\n        this.OR([\n          { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n          {\n            GATE: () => isObject,\n            ALT: () => this.SUBRULE(this.property, { LABEL: 'list' }),\n          },\n          { ALT: () => this.SUBRULE(this.attribute, { LABEL: 'list' }) },\n          {\n            GATE: () => isObject,\n            ALT: () => this.SUBRULE(this.field, { LABEL: 'list' }),\n          },\n          {\n            GATE: () => isEnum,\n            ALT: () => this.SUBRULE(this.enum, { LABEL: 'list' }),\n          },\n          {\n            GATE: () => !isObject,\n            ALT: () => this.SUBRULE(this.assignment, { LABEL: 'list' }),\n          },\n          { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n          { ALT: () => this.CONSUME2(lexer.LineBreak) },\n        ]);\n      });\n      this.CONSUME(lexer.RCurly);\n    }\n  );\n\n  private enum = this.RULE('enum', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'enumName' });\n    this.OPTION(() => {\n      this.CONSUME(lexer.Comment, { LABEL: 'comment' });\n    });\n  });\n  private attribute = this.RULE('attribute', () => {\n    this.OR1([\n      {\n        ALT: () =>\n          this.CONSUME(lexer.BlockAttribute, { LABEL: 'blockAttribute' }),\n      },\n      {\n        ALT: () =>\n          this.CONSUME(lexer.FieldAttribute, { LABEL: 'fieldAttribute' }),\n      },\n    ]);\n    this.OR2([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'attributeName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'attributeName' }),\n      },\n    ]);\n\n    this.OPTION(() => {\n      this.CONSUME(lexer.LRound);\n      this.MANY_SEP({\n        SEP: lexer.Comma,\n        DEF: () => {\n          this.SUBRULE(this.attributeArg);\n        },\n      });\n      this.CONSUME(lexer.RRound);\n    });\n  });\n\n  private attributeArg = this.RULE('attributeArg', () => {\n    this.OR([\n      {\n        ALT: () => this.SUBRULE(this.keyedArg, { LABEL: 'value' }),\n      },\n      {\n        ALT: () => this.SUBRULE(this.value, { LABEL: 'value' }),\n      },\n    ]);\n  });\n\n  private component = this.RULE('component', () => {\n    const type = this.OR1([\n      { ALT: () => this.CONSUME(lexer.Datasource, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Generator, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Model, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.View, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Enum, { LABEL: 'type' }) },\n    ]);\n    this.OR2([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'componentName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'componentName' }),\n      },\n    ]);\n\n    this.SUBRULE(this.block, {\n      ARGS: [{ componentType: type.image as ComponentType }],\n    });\n  });\n\n  private comment = this.RULE('comment', () => {\n    this.CONSUME(lexer.Comment, { LABEL: 'text' });\n  });\n\n  public schema = this.RULE('schema', () => {\n    this.MANY(() => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.component, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n        { ALT: () => this.CONSUME(lexer.LineBreak) },\n      ]);\n    });\n  });\n}\n\nexport const parser = new PrismaParser();\n","import type { CstNode, IToken } from 'chevrotain';\nimport getConfig from './getConfig';\nimport * as schema from './getSchema';\n\nconst schemaObjects = ['model', 'view'];\n\n/** Returns true if the value is an Object, such as a model or view. */\nexport function isSchemaObject(obj: schema.Object): boolean {\n  return obj != null && 'type' in obj && schemaObjects.includes(obj.type);\n}\n\n/** Returns true if the value is a Field. */\nexport function isSchemaField(field: schema.Field): boolean {\n  return field != null && 'type' in field && field.type === 'field';\n}\n\n/** Returns true if the value of the CstNode is a Token. */\nexport function isToken(node: [IToken] | [CstNode]): node is [IToken] {\n  return 'image' in node[0];\n}\n\n/**\n * If parser.nodeLocationTracking is set, then read the location statistics\n * from the available tokens. If tracking is 'none' then just return the\n * existing data structure.\n * */\nexport function appendLocationData<T extends Record<string, unknown>>(\n  data: T,\n  ...tokens: IToken[]\n): T {\n  const { parser } = getConfig();\n  if (parser.nodeLocationTracking === 'none') return data;\n\n  const location = tokens.reduce((memo, token) => {\n    if (!token) return memo;\n\n    const {\n      endColumn = -Infinity,\n      endLine = -Infinity,\n      endOffset = -Infinity,\n      startColumn = Infinity,\n      startLine = Infinity,\n      startOffset = Infinity,\n    } = memo;\n\n    if (token.startLine != null && token.startLine < startLine)\n      memo.startLine = token.startLine;\n    if (token.startColumn != null && token.startColumn < startColumn)\n      memo.startColumn = token.startColumn;\n    if (token.startOffset != null && token.startOffset < startOffset)\n      memo.startOffset = token.startOffset;\n\n    if (token.endLine != null && token.endLine > endLine)\n      memo.endLine = token.endLine;\n    if (token.endColumn != null && token.endColumn > endColumn)\n      memo.endColumn = token.endColumn;\n    if (token.endOffset != null && token.endOffset > endOffset)\n      memo.endOffset = token.endOffset;\n\n    return memo;\n  }, {} as IToken);\n\n  return Object.assign(data, { location });\n}\n","import { CstNode, IToken } from '@chevrotain/types';\nimport { parser } from './parser';\nimport * as Types from './getSchema';\nimport { appendLocationData, isToken } from './schemaUtils';\n\nconst BasePrismaVisitor = parser.getBaseCstVisitorConstructorWithDefaults();\nexport class PrismaVisitor extends BasePrismaVisitor {\n  constructor() {\n    super();\n    this.validateVisitor();\n  }\n\n  schema(ctx: CstNode & { list: CstNode[] }): Types.Schema {\n    const list = ctx.list?.map((item) => this.visit([item])) || [];\n    return { type: 'schema', list };\n  }\n\n  component(\n    ctx: CstNode & {\n      type: [IToken];\n      componentName: [IToken];\n      block: [CstNode];\n    }\n  ): Types.Block {\n    const [type] = ctx.type;\n    const [name] = ctx.componentName;\n    const list = this.visit(ctx.block);\n\n    const data = (() => {\n      switch (type.image) {\n        case 'datasource':\n          return {\n            type: 'datasource',\n            name: name.image,\n            assignments: list,\n          } as const;\n        case 'generator':\n          return {\n            type: 'generator',\n            name: name.image,\n            assignments: list,\n          } as const;\n        case 'model':\n          return { type: 'model', name: name.image, properties: list } as const;\n        case 'view':\n          return { type: 'view', name: name.image, properties: list } as const;\n        case 'enum':\n          return { type: 'enum', name: name.image, enumerators: list } as const;\n        default:\n          throw new Error(`Unexpected block type: ${type}`);\n      }\n    })();\n\n    return appendLocationData(data, type, name);\n  }\n\n  break(): Types.Break {\n    return { type: 'break' };\n  }\n\n  comment(ctx: CstNode & { text: [IToken] }): Types.Comment {\n    const [comment] = ctx.text;\n    const data = { type: 'comment', text: comment.image } as const;\n    return appendLocationData(data, comment);\n  }\n\n  block(ctx: CstNode & { list: CstNode[] }): Types.Block[] {\n    return ctx.list?.map((item) => this.visit([item]));\n  }\n\n  assignment(\n    ctx: CstNode & { assignmentName: [IToken]; assignmentValue: [CstNode] }\n  ): Types.Assignment {\n    const value = this.visit(ctx.assignmentValue);\n    const [key] = ctx.assignmentName;\n    const data = { type: 'assignment', key: key.image, value } as const;\n    return appendLocationData(data, key);\n  }\n\n  field(\n    ctx: CstNode & {\n      fieldName: [IToken];\n      fieldType: [CstNode];\n      array: [IToken];\n      optional: [IToken];\n      attributeList: CstNode[];\n      comment: [IToken];\n    }\n  ): Types.Field {\n    const fieldType = this.visit(ctx.fieldType);\n    const [name] = ctx.fieldName;\n    const attributes =\n      ctx.attributeList && ctx.attributeList.map((item) => this.visit([item]));\n    const comment = ctx.comment?.[0]?.image;\n    const data = {\n      type: 'field',\n      name: name.image,\n      fieldType,\n      array: ctx.array != null,\n      optional: ctx.optional != null,\n      attributes,\n      comment,\n    } as const;\n\n    return appendLocationData(data, name, ctx.optional?.[0], ctx.array?.[0]);\n  }\n\n  attribute(\n    ctx: CstNode & {\n      blockAttribute: [IToken];\n      fieldAttribute: [IToken];\n      groupName: [IToken];\n      attributeName: [IToken];\n      attributeArg: CstNode[];\n    }\n  ): Types.Attr {\n    const [name] = ctx.attributeName;\n    const [group] = ctx.groupName || [{}];\n    const args =\n      ctx.attributeArg && ctx.attributeArg.map((attr) => this.visit(attr));\n    const kind = ctx.blockAttribute != null ? 'object' : 'field';\n    const data = {\n      type: 'attribute',\n      name: name.image,\n      kind,\n      group: group.image,\n      args,\n    } as const;\n    const attrs = kind === 'object' ? ctx.blockAttribute : ctx.fieldAttribute;\n    return appendLocationData(data, name, ...attrs, group);\n  }\n\n  attributeArg(ctx: CstNode & { value: [CstNode] }): Types.AttributeArgument {\n    const value = this.visit(ctx.value);\n    return { type: 'attributeArgument', value };\n  }\n\n  func(\n    ctx: CstNode & { funcName: [IToken]; value: CstNode[]; keyedArg: CstNode[] }\n  ): Types.Func {\n    const [name] = ctx.funcName;\n    const params = ctx.value && ctx.value.map((item) => this.visit([item]));\n    const keyedParams =\n      ctx.keyedArg && ctx.keyedArg.map((item) => this.visit([item]));\n    const pars = (params || keyedParams) && [\n      ...(params ?? []),\n      ...(keyedParams ?? []),\n    ];\n    const data = { type: 'function', name: name.image, params: pars } as const;\n    return appendLocationData(data, name);\n  }\n\n  array(ctx: CstNode & { value: CstNode[] }): Types.RelationArray {\n    const args = ctx.value && ctx.value.map((item) => this.visit([item]));\n    return { type: 'array', args };\n  }\n\n  keyedArg(\n    ctx: CstNode & { keyName: [IToken]; value: [CstNode] }\n  ): Types.KeyValue {\n    const [key] = ctx.keyName;\n    const value = this.visit(ctx.value);\n    const data = { type: 'keyValue', key: key.image, value } as const;\n    return appendLocationData(data, key);\n  }\n\n  value(ctx: CstNode & { value: [IToken] | [CstNode] }): Types.Value {\n    if (isToken(ctx.value)) {\n      const [{ image }] = ctx.value;\n      return image;\n    }\n    return this.visit(ctx.value);\n  }\n\n  enum(\n    ctx: CstNode & { enumName: [IToken]; comment: [IToken] }\n  ): Types.Enumerator {\n    const [name] = ctx.enumName;\n    const comment = ctx.comment?.[0]?.image;\n    const data = { type: 'enumerator', name: name.image, comment } as const;\n    return appendLocationData(data, name);\n  }\n}\n","import { PrismaLexer } from './lexer';\nimport { PrismaVisitor } from './visitor';\nimport { parser } from './parser';\nimport type { CstNodeLocation } from 'chevrotain';\n\n/**\n * Parses a string containing a prisma schema's source code and returns an\n * object that represents the parsed data structure. You can make direct\n * modifications to the objects and arrays nested within, and then produce\n * a new prisma schema using printSchema().\n *\n * @example\n * const schema = getSchema(source)\n * // ... make changes to schema object ...\n * const changedSource = printSchema(schema)\n * */\nexport function getSchema(source: string): Schema {\n  const lexingResult = PrismaLexer.tokenize(source);\n  parser.input = lexingResult.tokens;\n  const cstNode = parser.schema();\n  if (parser.errors.length > 0) throw parser.errors[0];\n  const visitor = new PrismaVisitor();\n  return visitor.visit(cstNode);\n}\n\nexport interface Schema {\n  type: 'schema';\n  list: Block[];\n}\n\nexport type Block =\n  | Model\n  | View\n  | Datasource\n  | Generator\n  | Enum\n  | Comment\n  | Break;\n\nexport interface Object {\n  type: 'model' | 'view';\n  name: string;\n  properties: Array<Property | Comment | Break>;\n}\n\nexport interface Model extends Object {\n  type: 'model';\n  location?: CstNodeLocation;\n}\n\nexport interface View extends Object {\n  type: 'view';\n  location?: CstNodeLocation;\n}\n\nexport interface Datasource {\n  type: 'datasource';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n  location?: CstNodeLocation;\n}\n\nexport interface Generator {\n  type: 'generator';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n  location?: CstNodeLocation;\n}\n\nexport interface Enum {\n  type: 'enum';\n  name: string;\n  enumerators: Array<Enumerator | Comment | Break>;\n  location?: CstNodeLocation;\n}\n\nexport interface Comment {\n  type: 'comment';\n  text: string;\n}\n\nexport interface Break {\n  type: 'break';\n}\n\nexport type Property = GroupedBlockAttribute | BlockAttribute | Field;\n\nexport interface Assignment {\n  type: 'assignment';\n  key: string;\n  value: Value;\n}\n\nexport interface Enumerator {\n  type: 'enumerator';\n  name: string;\n  value?: Value;\n  comment?: string;\n}\n\nexport interface BlockAttribute {\n  type: 'attribute';\n  kind: 'object' | 'view';\n  group?: string;\n  name: string;\n  args: AttributeArgument[];\n  location?: CstNodeLocation;\n}\n\nexport type GroupedBlockAttribute = BlockAttribute & { group: string };\n\nexport interface Field {\n  type: 'field';\n  name: string;\n  fieldType: string | Func;\n  array?: boolean;\n  optional?: boolean;\n  attributes?: Attribute[];\n  comment?: string;\n  location?: CstNodeLocation;\n}\n\nexport type Attr =\n  | Attribute\n  | GroupedAttribute\n  | BlockAttribute\n  | GroupedBlockAttribute;\n\nexport interface Attribute {\n  type: 'attribute';\n  kind: 'field';\n  group?: string;\n  name: string;\n  args?: AttributeArgument[];\n  location?: CstNodeLocation;\n}\n\nexport type GroupedAttribute = Attribute & { group: string };\n\nexport interface AttributeArgument {\n  type: 'attributeArgument';\n  value: KeyValue | Value | Func;\n}\n\nexport interface KeyValue {\n  type: 'keyValue';\n  key: string;\n  value: Value;\n}\n\nexport interface Func {\n  type: 'function';\n  name: string;\n  params: Value[];\n}\n\nexport interface RelationArray {\n  type: 'array';\n  args: string[];\n}\n\nexport type Value =\n  | string\n  | number\n  | boolean\n  | Func\n  | RelationArray\n  | Array<Value>;\n","import { Block, Schema } from './getSchema';\n\nconst unsorted = ['break', 'comment'];\nconst defaultSortOrder = [\n  'generator',\n  'datasource',\n  'model',\n  'view',\n  'enum',\n  'break',\n  'comment',\n];\n\n/** Sorts the schema parts, in the given order, and alphabetically for parts of the same type. */\nexport const schemaSorter =\n  (\n    schema: Schema,\n    locales?: string | string[],\n    sortOrder: string[] = defaultSortOrder\n  ) =>\n  (a: Block, b: Block): number => {\n    // Preserve the position of comments and line breaks relative to their\n    // position in the file, since when a re-sort happens it wouldn't be\n    // clear whether a comment should affix to the object above or below it.\n    const aUnsorted = unsorted.indexOf(a.type) !== -1;\n    const bUnsorted = unsorted.indexOf(b.type) !== -1;\n\n    if (aUnsorted !== bUnsorted) {\n      return schema.list.indexOf(a) - schema.list.indexOf(b);\n    }\n\n    if (sortOrder !== defaultSortOrder)\n      sortOrder = sortOrder.concat(defaultSortOrder);\n    const typeIndex = sortOrder.indexOf(a.type) - sortOrder.indexOf(b.type);\n    if (typeIndex !== 0) return typeIndex;\n\n    // Resolve ties using the name of object's name.\n    if ('name' in a && 'name' in b)\n      return a.name.localeCompare(b.name, locales);\n\n    // If all else fails, leave objects in their original position.\n    return 0;\n  };\n","import * as Types from './getSchema';\nimport { EOL } from 'os';\nimport { schemaSorter } from './schemaSorter';\n\nexport interface PrintOptions {\n  sort?: boolean;\n  locales?: string | string[];\n  sortOrder?: Array<'generator' | 'datasource' | 'model' | 'view' | 'enum'>;\n}\n\n/**\n * Converts the given schema object into a string representing the prisma\n * schema's source code. Optionally can take options to change the sort order\n * of the schema parts.\n * */\nexport function printSchema(\n  schema: Types.Schema,\n  options: PrintOptions = {}\n): string {\n  const { sort = false, locales = undefined, sortOrder = undefined } = options;\n  let blocks = schema.list;\n  if (sort) {\n    // no point in preserving line breaks when re-sorting\n    blocks = schema.list = blocks.filter((block) => block.type !== 'break');\n    const sorter = schemaSorter(schema, locales, sortOrder);\n    blocks.sort(sorter);\n  }\n\n  return (\n    blocks\n      .map(printBlock)\n      .filter(Boolean)\n      .join(EOL)\n      .replace(/(\\r?\\n\\s*){3,}/g, EOL + EOL) + EOL\n  );\n}\n\nfunction printBlock(block: Types.Block): string {\n  switch (block.type) {\n    case 'comment':\n      return printComment(block);\n    case 'datasource':\n      return printDatasource(block);\n    case 'enum':\n      return printEnum(block);\n    case 'generator':\n      return printGenerator(block);\n    case 'model':\n    case 'view':\n      return printObject(block);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized block type`);\n  }\n}\n\nfunction printComment(comment: Types.Comment) {\n  return comment.text;\n}\n\nfunction printBreak() {\n  return EOL;\n}\n\nfunction printDatasource(db: Types.Datasource) {\n  const children = computeAssignmentFormatting(db.assignments);\n\n  return `\ndatasource ${db.name} {\n  ${children}\n}`;\n}\n\nfunction printEnum(enumerator: Types.Enum) {\n  const children = enumerator.enumerators\n    .map(printEnumerator)\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n\n  return `\nenum ${enumerator.name} {\n  ${children}\n}`;\n}\n\nfunction printEnumerator(\n  enumerator: Types.Enumerator | Types.Attribute | Types.Comment | Types.Break\n) {\n  switch (enumerator.type) {\n    case 'enumerator':\n      return [enumerator.name, enumerator.comment].filter(Boolean).join(' ');\n    case 'attribute':\n      return printAttribute(enumerator);\n    case 'comment':\n      return printComment(enumerator);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unexpected enumerator type`);\n  }\n}\n\nfunction printGenerator(generator: Types.Generator) {\n  const children = computeAssignmentFormatting(generator.assignments);\n\n  return `\ngenerator ${generator.name} {\n  ${children}\n}`;\n}\n\nfunction printObject(object: Types.Object) {\n  const children = computePropertyFormatting(object.properties);\n\n  return `\n${object.type} ${object.name} {\n  ${children}\n}`;\n}\n\nfunction printAssignment(\n  node: Types.Assignment | Types.Comment | Types.Break,\n  keyLength = 0\n) {\n  switch (node.type) {\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    case 'assignment':\n      return `${node.key.padEnd(keyLength)} = ${printValue(node.value)}`;\n    default:\n      throw new Error(`Unexpected assignment type`);\n  }\n}\n\nfunction printProperty(\n  node: Types.Property | Types.Comment | Types.Break,\n  nameLength = 0,\n  typeLength = 0\n) {\n  switch (node.type) {\n    case 'attribute':\n      return printAttribute(node);\n    case 'field':\n      return printField(node, nameLength, typeLength);\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized property type`);\n  }\n}\n\nfunction printAttribute(attribute: Types.Attribute | Types.BlockAttribute) {\n  const args =\n    attribute.args && attribute.args.length > 0\n      ? `(${attribute.args.map(printAttributeArg).filter(Boolean).join(', ')})`\n      : '';\n\n  const name = [attribute.name];\n  if (attribute.group) name.unshift(attribute.group);\n\n  return `${attribute.kind === 'field' ? '@' : '@@'}${name.join('.')}${args}`;\n}\n\nfunction printAttributeArg(arg: Types.AttributeArgument) {\n  return printValue(arg.value);\n}\n\nfunction printField(field: Types.Field, nameLength = 0, typeLength = 0) {\n  const name = field.name.padEnd(nameLength);\n  const fieldType = printFieldType(field).padEnd(typeLength);\n  const attrs = field.attributes ? field.attributes.map(printAttribute) : [];\n  const comment = field.comment;\n  return (\n    [name, fieldType, ...attrs]\n      .filter(Boolean)\n      .join(' ')\n      // comments ignore indents\n      .trim() + (comment ? ` ${comment}` : '')\n  );\n}\n\nfunction printFieldType(field: Types.Field) {\n  const suffix = field.array ? '[]' : field.optional ? '?' : '';\n\n  if (typeof field.fieldType === 'object') {\n    switch (field.fieldType.type) {\n      case 'function': {\n        return `${printFunction(field.fieldType)}${suffix}`;\n      }\n      default:\n        throw new Error(`Unexpected field type`);\n    }\n  }\n\n  return `${field.fieldType}${suffix}`;\n}\n\nfunction printFunction(func: Types.Func) {\n  const params = func.params ? func.params.map(printValue) : '';\n  return `${func.name}(${params})`;\n}\n\nfunction printValue(value: Types.KeyValue | Types.Value): string {\n  switch (typeof value) {\n    case 'object': {\n      if ('type' in value) {\n        switch (value.type) {\n          case 'keyValue':\n            return `${value.key}: ${printValue(value.value)}`;\n          case 'function':\n            return printFunction(value);\n          case 'array':\n            return `[${\n              value.args != null ? value.args.map(printValue).join(', ') : ''\n            }]`;\n          default:\n            throw new Error(`Unexpected value type`);\n        }\n      }\n\n      throw new Error(`Unexpected object value`);\n    }\n    default:\n      return String(value);\n  }\n}\n\nfunction computeAssignmentFormatting(\n  list: Array<Types.Comment | Types.Break | Types.Assignment>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const keyLengths = listBlocks.map((lists) =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'assignment' ? current.key.length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((item, index, arr) => {\n      if (index > 0 && item.type !== 'break' && arr[index - 1].type === 'break')\n        keyLengths.shift();\n      return printAssignment(item, keyLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n\nfunction computePropertyFormatting(\n  list: Array<Types.Break | Types.Comment | Types.Property>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const nameLengths = listBlocks.map((lists) =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? current.name.length : 0\n        ),\n      0\n    )\n  );\n\n  const typeLengths = listBlocks.map((lists) =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? printFieldType(current).length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((prop, index, arr) => {\n      if (\n        index > 0 &&\n        prop.type !== 'break' &&\n        arr[index - 1].type === 'break'\n      ) {\n        nameLengths.shift();\n        typeLengths.shift();\n      }\n\n      return printProperty(prop, nameLengths[0], typeLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n","import * as schema from './getSchema';\nimport { isSchemaField, isSchemaObject } from './schemaUtils';\nimport { PrintOptions, printSchema } from './printSchema';\n\n/** Returns the function type Original with its return type changed to NewReturn. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ReplaceReturnType<Original extends (...args: any) => any, NewReturn> = (\n  ...a: Parameters<Original>\n) => NewReturn;\n\n/**\n * Methods with return values that do not propagate the builder should not have\n * their return value modified by the type replacement system below\n * */\ntype ExtractKeys = 'getSchema' | 'getSubject' | 'getParent' | 'print';\n\n/** These keys preserve the return value context that they were given */\ntype NeutralKeys = 'break' | 'comment' | 'attribute' | 'enumerator' | 'then';\n\n/** Keys allowed when you call .datasource() or .generator() */\ntype DatasourceOrGeneratorKeys = 'assignment';\n\n/** Keys allowed when you call .enum(\"name\") */\ntype EnumKeys = 'enumerator';\n\n/** Keys allowed when you call .field(\"name\") */\ntype FieldKeys = 'attribute' | 'removeAttribute';\n\n/** Keys allowed when you call .model(\"name\") */\ntype BlockKeys = 'blockAttribute' | 'field' | 'removeField';\n\n/**\n * Utility type for making the PrismaSchemaBuilder below readable:\n * Removes methods from the builder that are prohibited based on the context\n * the builder is in. For example, you can add fields to a model, but you can't\n * add fields to an enum or a datasource.\n */\ntype PrismaSchemaSubset<\n  Universe extends keyof ConcretePrismaSchemaBuilder,\n  Method\n> = ReplaceReturnType<\n  ConcretePrismaSchemaBuilder[Universe],\n  PrismaSchemaBuilder<Exclude<keyof ConcretePrismaSchemaBuilder, Method>>\n>;\n\n/**\n * The brain of this whole operation: depending on the key of the method name\n * we receive, filter the available list of method calls the user can make to\n * prevent them from making invalid calls, such as builder.datasource().field()\n * */\ntype PrismaSchemaBuilder<K extends keyof ConcretePrismaSchemaBuilder> = {\n  [U in K]: U extends ExtractKeys\n    ? ConcretePrismaSchemaBuilder[U]\n    : U extends NeutralKeys\n    ? ConcretePrismaSchemaBuilder[U] //ReplaceReturnType<ConcretePrismaSchemaBuilder[U], PrismaSchemaBuilder<K>>\n    : U extends 'datasource'\n    ? PrismaSchemaSubset<U, 'datasource' | EnumKeys | FieldKeys | BlockKeys>\n    : U extends 'generator'\n    ? PrismaSchemaSubset<U, EnumKeys | FieldKeys | BlockKeys>\n    : U extends 'model'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'view'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'field'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys>\n    : U extends 'removeField'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'enum'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | BlockKeys | FieldKeys>\n    : U extends 'removeAttribute'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys>\n    : PrismaSchemaSubset<\n        U,\n        DatasourceOrGeneratorKeys | EnumKeys | FieldKeys | BlockKeys | 'comment'\n      >;\n};\n\ntype Arg =\n  | string\n  | {\n      name: string;\n      function?: Arg[];\n    };\ntype Parent = schema.Block | undefined;\ntype Subject = schema.Block | schema.Field | undefined;\n\nexport class ConcretePrismaSchemaBuilder {\n  private schema: schema.Schema;\n  private _subject: Subject;\n  private _parent: Parent;\n\n  constructor(source = '') {\n    this.schema = schema.getSchema(source);\n  }\n\n  /** Prints the schema out as a source string */\n  print(options: PrintOptions = {}): string {\n    return printSchema(this.schema, options);\n  }\n\n  /** Returns the underlying schema object for more advanced use cases. */\n  getSchema(): schema.Schema {\n    return this.schema;\n  }\n\n  /** Adds or updates a generator block based on the name. */\n  generator(name: string, provider = 'prisma-client-js'): this {\n    const generator: schema.Generator =\n      this.schema.list.reduce<schema.Generator>(\n        (memo, block) =>\n          block.type === 'generator' && block.name === name ? block : memo,\n        {\n          type: 'generator',\n          name,\n          assignments: [\n            { type: 'assignment', key: 'provider', value: `\"${provider}\"` },\n          ],\n        }\n      );\n\n    if (!this.schema.list.includes(generator)) this.schema.list.push(generator);\n    this._subject = generator;\n    return this;\n  }\n\n  /** Removes something from the schema with the given name. */\n  drop(name: string): this {\n    const index = this.schema.list.findIndex(\n      (block) => 'name' in block && block.name === name\n    );\n    if (index !== -1) this.schema.list.splice(index, 1);\n    return this;\n  }\n\n  /** Sets the datasource for the schema. */\n  datasource(provider: string, url: string | { env: string }): this {\n    const datasource: schema.Datasource = {\n      type: 'datasource',\n      name: 'db',\n      assignments: [\n        {\n          type: 'assignment',\n          key: 'url',\n          value:\n            typeof url === 'string'\n              ? `\"${url}\"`\n              : { type: 'function', name: 'env', params: [`\"${url.env}\"`] },\n        },\n        { type: 'assignment', key: 'provider', value: provider },\n      ],\n    };\n    const existingIndex = this.schema.list.findIndex(\n      (block) => block.type === 'datasource'\n    );\n    this.schema.list.splice(\n      existingIndex,\n      existingIndex !== -1 ? 1 : 0,\n      datasource\n    );\n    this._subject = datasource;\n    return this;\n  }\n\n  /** Adds or updates a model based on the name. Can be chained with .field() or .blockAttribute() to add to it. */\n  model(name: string): this {\n    const model = this.schema.list.reduce<schema.Model>(\n      (memo, block) =>\n        block.type === 'model' && block.name === name ? block : memo,\n      { type: 'model', name, properties: [] }\n    );\n    if (!this.schema.list.includes(model)) this.schema.list.push(model);\n    this._subject = model;\n    return this;\n  }\n\n  /** Adds or updates a view based on the name. Can be chained with .field() or .blockAttribute() to add to it. */\n  view(name: string): this {\n    const view = this.schema.list.reduce<schema.View>(\n      (memo, block) =>\n        block.type === 'view' && block.name === name ? block : memo,\n      { type: 'view', name, properties: [] }\n    );\n    if (!this.schema.list.includes(view)) this.schema.list.push(view);\n    this._subject = view;\n    return this;\n  }\n\n  /** Adds or updates an enum based on the name. Can be chained with .enumerator() to add a value to it. */\n  enum(name: string, enumeratorNames: string[] = []): this {\n    const e = this.schema.list.reduce<schema.Enum>(\n      (memo, block) =>\n        block.type === 'enum' && block.name === name ? block : memo,\n      {\n        type: 'enum',\n        name,\n        enumerators: enumeratorNames.map((name) => ({\n          type: 'enumerator',\n          name,\n        })),\n      }\n    );\n    if (!this.schema.list.includes(e)) this.schema.list.push(e);\n    this._subject = e;\n    return this;\n  }\n\n  /** Add an enum value to the current enum. */\n  enumerator(value: string): this {\n    const subject = this.getSubject<schema.Enum>();\n    if (!subject || !('type' in subject) || subject.type !== 'enum') {\n      throw new Error('Subject must be a prisma enum!');\n    }\n\n    subject.enumerators.push({ type: 'enumerator', name: value });\n    return this;\n  }\n\n  /**\n   * Returns the current subject, such as a model, field, or enum.\n   * @example\n   * builder.getModel('User').field('firstName').getSubject() // the firstName field\n   * */\n  private getSubject<S extends Subject>(): S {\n    return this._subject as S;\n  }\n\n  /** Returns the parent of the current subject when in a nested context. The parent of a field is its model or view. */\n  private getParent<S extends Parent = schema.Object>(): S {\n    return this._parent as S;\n  }\n\n  /**\n   * Adds a block-level attribute to the current model.\n   * @example\n   * builder.model('Project')\n   *   .blockAttribute(\"map\", \"projects\")\n   *   .blockAttribute(\"unique\", [\"firstName\", \"lastName\"]) // @@unique([firstName, lastName])\n   * */\n  blockAttribute(\n    name: string,\n    args?: string | string[] | Record<string, schema.Value>\n  ): this {\n    let subject = this.getSubject<schema.Object>();\n    if (!isSchemaObject(subject)) {\n      const parent = this.getParent<schema.Object>();\n      if (!isSchemaObject(parent))\n        throw new Error('Subject must be a prisma model or view!');\n\n      subject = this._subject = parent;\n    }\n\n    const attributeArgs = ((): schema.AttributeArgument[] => {\n      if (!args) return [] as schema.AttributeArgument[];\n      if (typeof args === 'string')\n        return [{ type: 'attributeArgument', value: `\"${args}\"` }];\n      if (Array.isArray(args))\n        return [{ type: 'attributeArgument', value: { type: 'array', args } }];\n      return Object.entries(args).map(([key, value]) => ({\n        type: 'attributeArgument',\n        value: { type: 'keyValue', key, value },\n      }));\n    })();\n\n    const property: schema.BlockAttribute = {\n      type: 'attribute',\n      kind: 'object',\n      name,\n      args: attributeArgs,\n    };\n    subject.properties.push(property);\n    return this;\n  }\n\n  /** Adds an attribute to the current field. */\n  attribute<T extends schema.Field>(\n    name: string,\n    args?: Arg[] | Record<string, string[]>\n  ): this {\n    const parent = this.getParent();\n    const subject = this.getSubject<T>();\n    if (!isSchemaObject(parent)) {\n      throw new Error('Parent must be a prisma model or view!');\n    }\n\n    if (!isSchemaField(subject)) {\n      throw new Error('Subject must be a prisma field!');\n    }\n\n    if (!subject.attributes) subject.attributes = [];\n    const attribute = subject.attributes.reduce<schema.Attribute>(\n      (memo, attr) =>\n        attr.type === 'attribute' &&\n        `${attr.group ? `${attr.group}.` : ''}${attr.name}` === name\n          ? attr\n          : memo,\n      {\n        type: 'attribute',\n        kind: 'field',\n        name,\n      }\n    );\n\n    if (Array.isArray(args)) {\n      const mapArg = (arg: Arg): schema.Value | schema.Func => {\n        return typeof arg === 'string'\n          ? arg\n          : {\n              type: 'function',\n              name: arg.name,\n              params: arg.function?.map(mapArg) ?? [],\n            };\n      };\n\n      if (args.length > 0)\n        attribute.args = args.map((arg) => ({\n          type: 'attributeArgument',\n          value: mapArg(arg),\n        }));\n    } else if (typeof args === 'object') {\n      attribute.args = Object.entries(args).map(([key, value]) => ({\n        type: 'attributeArgument',\n        value: { type: 'keyValue', key, value: { type: 'array', args: value } },\n      }));\n    }\n\n    if (!subject.attributes.includes(attribute))\n      subject.attributes.push(attribute);\n\n    return this;\n  }\n\n  /** Remove an attribute from the current field */\n  removeAttribute<T extends schema.Field>(name: string): this {\n    const parent = this.getParent();\n    const subject = this.getSubject<T>();\n    if (!isSchemaObject(parent)) {\n      throw new Error('Parent must be a prisma model or view!');\n    }\n\n    if (!isSchemaField(subject)) {\n      throw new Error('Subject must be a prisma field!');\n    }\n\n    if (!subject.attributes) subject.attributes = [];\n    subject.attributes = subject.attributes.filter(\n      (attr) => !(attr.type === 'attribute' && attr.name === name)\n    );\n\n    return this;\n  }\n\n  /** Add an assignment to a generator or datasource */\n  assignment<T extends schema.Generator | schema.Datasource>(\n    key: string,\n    value: string\n  ): this {\n    const subject = this.getSubject<T>();\n    if (\n      !subject ||\n      !('type' in subject) ||\n      !['generator', 'datasource'].includes(subject.type)\n    )\n      throw new Error('Subject must be a prisma generator or datasource!');\n\n    function tap<T>(subject: T, callback: (s: T) => void) {\n      callback(subject);\n      return subject;\n    }\n\n    const assignment = subject.assignments.reduce<schema.Assignment>(\n      (memo, assignment) =>\n        assignment.type === 'assignment' && assignment.key === key\n          ? tap(assignment, (a) => {\n              a.value = `\"${value}\"`;\n            })\n          : memo,\n      {\n        type: 'assignment',\n        key,\n        value: `\"${value}\"`,\n      }\n    );\n\n    if (!subject.assignments.includes(assignment))\n      subject.assignments.push(assignment);\n\n    return this;\n  }\n\n  private blockInsert(statement: schema.Break | schema.Comment): this {\n    let subject = this.getSubject<schema.Block>();\n    const allowed = ['datasource', 'enum', 'generator', 'model', 'view'];\n    if (!subject || !('type' in subject) || !allowed.includes(subject.type)) {\n      const parent = this.getParent<schema.Block>();\n      if (!parent || !('type' in parent) || !allowed.includes(parent.type)) {\n        throw new Error('Subject must be a prisma block!');\n      }\n\n      subject = this._subject = parent;\n    }\n\n    switch (subject.type) {\n      case 'datasource': {\n        subject.assignments.push(statement);\n        break;\n      }\n      case 'enum': {\n        subject.enumerators.push(statement);\n        break;\n      }\n      case 'generator': {\n        subject.assignments.push(statement);\n        break;\n      }\n      case 'model': {\n        subject.properties.push(statement);\n        break;\n      }\n    }\n    return this;\n  }\n\n  /** Add a line break */\n  break(): this {\n    const lineBreak: schema.Break = { type: 'break' };\n    return this.blockInsert(lineBreak);\n  }\n\n  /**\n   * Add a comment. Regular comments start with // and do not appear in the\n   * prisma AST. Node comments start with /// and will appear in the AST,\n   * affixed to the node that follows the comment.\n   * */\n  comment(text: string, node = false): this {\n    const comment: schema.Comment = {\n      type: 'comment',\n      text: `//${node ? '/' : ''} ${text}`,\n    };\n    return this.blockInsert(comment);\n  }\n\n  /**\n   * Add a comment to the schema. Regular comments start with // and do not appear in the\n   * prisma AST. Node comments start with /// and will appear in the AST,\n   * affixed to the node that follows the comment.\n   * */\n  schemaComment(text: string, node = false): this {\n    const comment: schema.Comment = {\n      type: 'comment',\n      text: `//${node ? '/' : ''} ${text}`,\n    };\n    this.schema.list.push(comment);\n    return this;\n  }\n\n  /**\n   * Adds or updates a field in the current model. The field can be customized\n   * further with one or more .attribute() calls.\n   * */\n  field(name: string, fieldType: string | schema.Func = 'String'): this {\n    let subject = this.getSubject<schema.Object>();\n    if (!isSchemaObject(subject)) {\n      const parent = this.getParent<schema.Object>();\n      if (!isSchemaObject(parent))\n        throw new Error('Subject must be a prisma model or view!');\n\n      subject = this._subject = parent;\n    }\n\n    const field = subject.properties.reduce<schema.Field>(\n      (memo, block) =>\n        block.type === 'field' && block.name === name ? block : memo,\n      {\n        type: 'field',\n        name,\n        fieldType,\n      }\n    );\n\n    if (!subject.properties.includes(field)) subject.properties.push(field);\n    this._parent = subject;\n    this._subject = field;\n    return this;\n  }\n\n  /** Drop a field from the current model or view. */\n  removeField(name: string): this {\n    let subject = this.getSubject<schema.Object>();\n    if (!isSchemaObject(subject)) {\n      const parent = this.getParent<schema.Object>();\n      if (!isSchemaObject(parent))\n        throw new Error('Subject must be a prisma model or view!');\n\n      subject = this._subject = parent;\n    }\n\n    subject.properties = subject.properties.filter(\n      (field) => !(field.type === 'field' && field.name === name)\n    );\n    return this;\n  }\n\n  /**\n   * Returns the current subject, allowing for more advanced ways of\n   * manipulating the schema.\n   * */\n  then<R extends NonNullable<Subject>>(\n    callback: (subject: R) => unknown\n  ): this {\n    callback(this._subject as R);\n    return this;\n  }\n}\n\nexport function createPrismaSchemaBuilder(\n  source?: string\n): PrismaSchemaBuilder<\n  Exclude<\n    keyof ConcretePrismaSchemaBuilder,\n    DatasourceOrGeneratorKeys | EnumKeys | FieldKeys | BlockKeys\n  >\n> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new ConcretePrismaSchemaBuilder(source) as any;\n}\n"],"names":["Identifier","createToken","name","pattern","Datasource","push_mode","Generator","Model","View","Enum","True","longer_alt","False","Null","Comment","Lexer","NA","DocComment","categories","LineComment","Attribute","BlockAttribute","label","FieldAttribute","Dot","QuestionMark","LCurly","RCurly","pop_mode","LRound","RRound","LSquare","RSquare","Comma","Colon","Equals","StringLiteral","NumberLiteral","WhiteSpace","group","SKIPPED","LineBreak","line_breaks","naTokens","multiModeTokens","modes","global","concat","block","defaultMode","PrismaLexer","defaultConfig","parser","nodeLocationTracking","config","getConfig","result","configSync","search","Object","assign","PrismaParser","_CstParser","_inheritsLoose","_this","call","lexer","RULE","CONSUME1","CONSUME2","keyedArg","CONSUME","LABEL","SUBRULE","value","array","MANY_SEP","SEP","DEF","func","OR","ALT","property","assignment","field","OPTION1","MANY","attribute","OPTION2","options","_options","componentType","isEnum","isObject","comment","GATE","OPTION","OR1","OR2","attributeArg","component","type","ARGS","image","schema","performSelfAnalysis","CstParser","schemaObjects","isSchemaObject","obj","includes","isSchemaField","isToken","node","appendLocationData","data","_getConfig","_len","arguments","length","tokens","Array","_key","location","reduce","memo","token","_memo$endColumn","endColumn","Infinity","_memo$endLine","endLine","_memo$endOffset","endOffset","_memo$startColumn","startColumn","_memo$startLine","startLine","_memo$startOffset","startOffset","BasePrismaVisitor","getBaseCstVisitorConstructorWithDefaults","PrismaVisitor","_BasePrismaVisitor","validateVisitor","_proto","prototype","ctx","_ctx$list","_this2","list","map","item","visit","_ctx$type","_ctx$componentName","componentName","assignments","properties","enumerators","Error","_break","_ctx$text","text","_ctx$list2","_this3","assignmentValue","_ctx$assignmentName","assignmentName","key","_this4","_ctx$comment","_ctx$optional","_ctx$array","fieldType","_ctx$fieldName","fieldName","attributes","attributeList","optional","_this5","_ctx$attributeName","attributeName","_ref","groupName","args","attr","kind","blockAttribute","attrs","fieldAttribute","apply","_this6","_ctx$funcName","funcName","params","keyedParams","pars","_this7","_ctx$keyName","keyName","_ctx$value","_enum","_ctx$comment2","_ctx$enumName","enumName","getSchema","source","lexingResult","tokenize","input","cstNode","errors","visitor","unsorted","defaultSortOrder","schemaSorter","locales","sortOrder","a","b","aUnsorted","indexOf","bUnsorted","typeIndex","localeCompare","printSchema","_options$sort","sort","_options$locales","undefined","_options$sortOrder","blocks","filter","sorter","printBlock","Boolean","join","EOL","replace","printComment","printDatasource","printEnum","printGenerator","printObject","printBreak","db","children","computeAssignmentFormatting","enumerator","printEnumerator","printAttribute","generator","object","computePropertyFormatting","printAssignment","keyLength","padEnd","printValue","printProperty","nameLength","typeLength","printField","printAttributeArg","unshift","arg","printFieldType","trim","suffix","printFunction","String","pos","listBlocks","current","index","arr","push","keyLengths","lists","max","Math","shift","nameLengths","typeLengths","prop","ConcretePrismaSchemaBuilder","_subject","_parent","print","provider","drop","findIndex","splice","datasource","url","env","existingIndex","model","view","enumeratorNames","e","subject","getSubject","getParent","parent","attributeArgs","isArray","entries","mapArg","_arg$function$map","_arg$function","_ref2","removeAttribute","tap","callback","blockInsert","statement","allowed","lineBreak","schemaComment","removeField","then","createPrismaSchemaBuilder"],"mappings":"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"}